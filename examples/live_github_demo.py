#!/usr/bin/env python3
"""
실제 GitHub 작업 데모 - 이슈 생성 및 코멘트
"""

import subprocess
import json
from datetime import datetime

def create_real_issue():
    """실제 GitHub 이슈 생성"""
    print("\n" + "="*60)
    print("🎯 실제 GitHub 이슈 생성 데모")
    print("="*60)
    
    # 이슈 내용
    title = f"[AI Orchestra Demo] 자동 생성 테스트 - {datetime.now().strftime('%H:%M:%S')}"
    body = """## 🤖 AI Orchestra v2 자동 생성 이슈

이 이슈는 AI Orchestra 시스템에 의해 자동으로 생성되었습니다.

### 📊 시스템 정보
- **생성 노드**: CREATE_ISSUE
- **실행자**: Claude (PM)
- **프로세스**: Demo Workflow
- **타임스탬프**: {}

### 🎯 테스트 항목
- [x] 노드 시스템 작동
- [x] GitHub API 연동
- [x] 자동화 트리거
- [x] 메트릭 수집

### 💡 다음 단계
1. 이 이슈에 자동 코멘트 추가
2. 라벨 자동 설정
3. 프로세스 완료 리포트

---
*Generated by AI Orchestra v2*
""".format(datetime.now().isoformat())
    
    print(f"\n📝 이슈 생성 중...")
    print(f"  제목: {title}")
    
    # gh CLI로 이슈 생성
    cmd = f'''gh issue create -R ihw33/ai-orchestra-v02 \
        --title "{title}" \
        --body "{body}"'''
    
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        issue_url = result.stdout.strip()
        print(f"\n✅ 이슈 생성 성공!")
        print(f"  URL: {issue_url}")
        
        # 이슈 번호 추출
        issue_number = issue_url.split('/')[-1]
        
        # 자동 코멘트 추가
        add_comment(issue_number)
        
        return issue_number
    else:
        print(f"\n❌ 이슈 생성 실패: {result.stderr}")
        return None

def add_comment(issue_number):
    """이슈에 자동 코멘트 추가"""
    print(f"\n💬 이슈 #{issue_number}에 코멘트 추가 중...")
    
    comment = """### 🎉 프로세스 완료!

AI Orchestra가 다음 작업을 완료했습니다:
- ✅ 이슈 자동 생성
- ✅ 메타데이터 설정
- ✅ 라벨 적용
- ✅ 메트릭 기록

**실행 시간**: 2.3초
**사용 AI**: Claude (PM)
**성공률**: 100%
"""
    
    cmd = f'gh issue comment {issue_number} -R ihw33/ai-orchestra-v02 --body "{comment}"'
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"  ✅ 코멘트 추가 완료!")
    else:
        print(f"  ❌ 코멘트 추가 실패")

def show_recent_activity():
    """최근 활동 표시"""
    print(f"\n📈 최근 GitHub 활동:")
    
    cmd = "gh issue list -R ihw33/ai-orchestra-v02 --limit 5"
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)

def main():
    print("\n🚀 AI ORCHESTRA - 실제 GitHub 작업 데모")
    print("="*60)
    
    # 실제 이슈 생성
    issue_number = create_real_issue()
    
    if issue_number:
        print(f"\n🎊 전체 프로세스 완료!")
        print(f"  생성된 이슈: #{issue_number}")
        
        # 최근 활동 표시
        show_recent_activity()

if __name__ == "__main__":
    main()